<pre>
    <code></code>
</pre>
<script id="script">
    var arr1 = () => {
        return [1, 4, 'qwert', '4.5', 2, 3, 0.2]
    }
    // 检测数组 Array.isArray
    console.log(Array.isArray(arr1()), Array.isArray('arr1')) // => true　false
    // join
    console.log(arr1().join(), arr1().join('||')) // => 1,4,qwert  1||4||qwert
    /*
    栈
    栈是一种 LIFO（Last-In-First-Out，后进先出）的数据结构
    push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。
    pop()不需要参数，方法则从数组末尾移除最后一项，减少数组的 length 值，然后返回移除的项。
    push pop, 会对原数组产生影响  push()传空不会产生效果，null和undefined没事
    */
    console.log(arr1().push(), arr1().push('push1'), arr1().pop()) // => 　不变　加了个'1' '1'被移除了
    /*
    队列
    队列是一种  FIFO （First-In-First-Out，先进先出）。队列在列表的末端添加项，从列表的前端移除项。
    shift(), 不需要参数，它能够移除数组中的第一个项并返回该项，同时将数组长度减 1。
    shift会对原数组产生影响
    unshift()，　能在数组前端添加任意个项并返回新数组的长度。
    同时使用 unshift()和 pop()方法，可以从相反的方向来模拟队列，即在数组的前端添加项，从数组末端移除项，
    */
    console.log(arr1().shift(), arr1().push('shift1')) // => 第一个被干掉了　最后面添加个'1'
    /*
    重排序
    reverse()方法会反转数组项的顺序
    sort(), 在默认情况下， sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。
    为了实现排序， sort()方法会调用每个数组项的 toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值， sort()方法比较的也是字符串
    sort()本身可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面
    比较函数接收两个参数，第一个参数应该位于第二个之前则返回一个负数，相等则返回 0，反之则返回一个正数。
    */
    console.log(arr1().reverse(), arr1().sort(), arr1().sort((curr, next) => {
        if(curr.length === next.length) {
            return 0
        }
        return curr.length > next.length ? 1 : -1
    })) // => 反向输出　比较大小
    /*
    concat() (成员如果包含引用类型会产生引用)
    方法可以基于当前数组中的所有项创建一个新数组。
    具体来说，这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。
    如果传递给 concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。如果传递的值不是数组，这些值就会被简单地添加到结果数组的末尾。
    */
    console.log(arr1().concat([1,2,3,1]), arr1().concat([1,2], ['aa', 1, 'bb'], ['c1', 1]))
    /*
    slice() (成员如果包含引用类型会产生引用)
    基于当前数组中的一或多个项创建一个新数组。
    方法可以接受一或两个参数，即要返回项的起始和结束位置。
    在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项,但不包括结束位置的项
    如果 slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。
    在一个包含 5 项的数组上调用 slice(-2,-1)与调用 slice(3,4)得到的结果相同。
    如果结束位置小于起始位置，则返回空数组。
    */
</script>
<script>
    __Utils.mountCode('pre code', '#script')
</script>

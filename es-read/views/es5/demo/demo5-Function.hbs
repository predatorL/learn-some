<pre>
    <code></code>
</pre>
<script id="script">
    // Function
    // 原型
    var sayHello = function (personal) {
        switch (personal.constructor) {
            case Li:
                console.log('嘿，你好');
                break;
            case Dan:
                console.log('吃早饭了么');
                break;
            case Arthur:
                console.log('你今天看起来真漂亮');
                break;
            default:
                break;
        }
    }
</script>
<script>
    __Utils.mountCode('pre code', '#script')
</script>
<script title="LazyMan">
    var LazyMan = function (name) {
        console.log(`Hi! This is ${name}!`);
        let obj = {
            name,
            tasks: [],
            next() {
                const fn = this.tasks.shift();
                fn && fn();
            },
            sleep(num) {
                this.tasks.push(() => {
                    console.log(`等待${num}秒..`);
                    setTimeout(() => {
                        console.log(`Wake up after ${num}`);
                        this.next();
                    }, num * 1000)
                })
                return this;
            },
            sleepFirst(time) {
                this.tasks.unshift(() => {
                    setTimeout(() => {
                        console.log("Wake up after " + time + "s!");
                        this.next();
                    }, time * 1000);
                });
                return this;
            },
            eat(food) {
                this.tasks.push(() => {
                    console.log(`eat ${food}`);
                    this.next();
                })
                return this;
            }
        }
        // 在下一个事件循环启动任务 这才是关键
        setTimeout(() => {
            obj.next();
        }, 0)
        return obj;
    }
    LazyMan('test1').sleep(5).eat('f1').eat('f2')


    class _LazyMan2 {
        constructor(name) {
            this.tasks = [];
            this.tasks.push(() => {
                console.log("Hi! This is " + name + "!");
                this.next();
            });
            setTimeout(() => {
                this.next();
            }, 0); // 在下一个事件循环启动任务
        }

        /* 事件调度函数 */
        next() {
            var fn = this.tasks.shift();
            fn && fn();
        }
        eat(name) {
            this.tasks.push(() => {
                console.log("Eat " + name + "~");
                this.next()
            });
            return this; // 实现链式调用
        }
        sleep(time) {
            this.tasks.push(() => {
                console.log(`等待${time}秒..`);
                setTimeout(() => {
                    console.log("Wake up after " + time + "s!");
                    this.next();
                }, time * 1000);
            });
            return this;
        }
        sleepFirst(time) {
            this.tasks.unshift(() => {
                setTimeout(() => {
                    console.log("Wake up after " + time + "s!");
                    this.next();
                }, time * 1000);
            });
            return this;
        }

    }

    /* 封装 */
    function LazyMan2(name) {
        return new _LazyMan2(name);
    };
    LazyMan2('test1').sleep(5).eat('f1').eat('f2')


    // 原型

    function _LazyMan3(name) {
        this.tasks = [];
        this.tasks.push(() => {
            console.log("Hi! This is " + name + "!");
            this.next();
        });
        setTimeout(() => {
            this.next();
        }, 0); // 在下一个事件循环启动任务
    }
    /* 事件调度函数 */
    _LazyMan3.prototype = {
        next() {
            var fn = this.tasks.shift();
            fn && fn();
        },
        eat(name) {
            this.tasks.push(() => {
                console.log("Eat " + name + "~");
                this.next()
            });
            return this; // 实现链式调用
        },
        sleep(time) {
            this.tasks.push(() => {
                console.log(`等待${time}秒..`);
                setTimeout(() => {
                    console.log("Wake up after " + time + "s!");
                    this.next();
                }, time * 1000);
            });
            return this;
        },
        sleepFirst(time) {
            this.tasks.unshift(() => {
                setTimeout(() => {
                    console.log("Wake up after " + time + "s!");
                    this.next();
                }, time * 1000);
            });
            return this;
        }

    }

    /* 封装 */
    function LazyMan3(name) {
        return new _LazyMan3(name);
    };

    LazyMan3('test1').sleep(5).eat('f1').eat('f2')

</script>